RTL CODE
`timescale 1ns / 1ps
module vending_machine(
   input clk,rst,
   input [1:0] in,
   output reg [1:0] out,
   output reg change
    );
 parameter s0 = 2'b00;
 parameter s1 = 2'b01;
 parameter s2 = 2'b10;
 
 reg[2:0] cst,nst;
  
  always@(posedge clk) begin
    if(rst)begin
          cst<=0;
          nst<=0;
          change<=0;
       end
     else 
         cst<=nst;
      end
  always@(*)begin
     case(cst)
       s0: 
          if(in==0) begin
             nst=0;
             out=0;
             change=2'b00;
          end
          else if(in==2'b01)begin
             nst=s1;
             out=0;
             change=2'b00;
          end
          else if(in==2'b10)begin
             nst=s2;
             out=0;
             change=2'b00;
          end
        
        s1:
          if(in==0) begin
             nst=s0;
             out=0;
             change=2'b01;
          end
          else if(in==2'b01)begin
             nst=s2;
             out=0;
             change=2'b00;
          end
          else if(in==2'b10)begin
             nst=s0;
             out=1;
             change=2'b00;
          end
          
         s2:
          if(in==0) begin
             nst=s0;
             out=0;
             change=2'b11;
          end
          else if(in==2'b01)begin
             nst=s0;
             out=1;
             change=2'b01;
          end
          else if(in==2'b10)begin
             nst=s0;
             out=1;
             change=2'b01;
          end
       endcase
     end   

  test bench
`timescale 1ns / 1ps

module vending_machine_tb;

    // Inputs
    reg clk;
    reg rst;
    reg [1:0] in;

    // Outputs
    wire [1:0] out;
    wire change;

    // Instantiate DUT (Device Under Test)
    vending_machine uut (
        .clk(clk),
        .rst(rst),
        .in(in),
        .out(out),
        .change(change)
    );

    // Clock generation -> 10ns period
    always #5 clk = ~clk;

    initial begin
        // Initialize
        clk = 0;
        rst = 1;
        in  = 2'b00;

        // Reset the machine
        #10;
        rst = 0;

        // Test case 1: Insert ₹0, expect no output, no change
        #10 in = 2'b00;
        #10 in = 2'b00;

        // Test case 2: Insert ₹5, expect no product, no change
        #10 in = 2'b01;
        #10 in = 2'b00;   // No further coin, wait
        
        // Test case 3: Insert another ₹5 (total ₹10), expect product dispense
        #10 in = 2'b01;
        #10 in = 2'b00;   // Machine should dispense item, no change

        // Test case 4: Insert ₹10 directly, expect product dispense immediately
        #10 in = 2'b10;
        #10 in = 2'b00;

        // Test case 5: Insert ₹10 when cost is ₹5, expect product + ₹5 change
        #10 in = 2'b10;  // Insert ₹10 first
        #10 in = 2'b01;  // Insert ₹5 later to test different paths
        #10 in = 2'b00;

        // Test case 6: No coin inserted at all
        #20 in = 2'b00;

        // Finish simulation
        #50;
        $finish;
    end

    // Monitor values
    initial begin
        $monitor("Time=%0t | in=%b | out=%b | change=%b | state=%b",
                 $time, in, out, change, uut.cst);
    end

endmodule

  
endmodule

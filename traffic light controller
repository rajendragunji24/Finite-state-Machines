RTL CODE
`timescale 1ns / 1ps
module Traffic_sys(
    output reg [2:0] north_light, south_light, east_light, west_light,
    input clk, rst
);

    // State definitions
    parameter [2:0] north        = 3'b000,
                    north_yellow = 3'b001,
                    west         = 3'b010,
                    west_yellow  = 3'b011,
                    south        = 3'b100,
                    south_yellow = 3'b101,
                    east         = 3'b110,
                    east_yellow  = 3'b111;

    reg [2:0] state;
    reg [3:0] count;

    // Sequential logic for state transitions
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            state <= north;
            count <= 4'b0000;
        end
        else begin
            case (state)
                north: begin
                    if (count == 4'b1111) begin
                        count <= 4'b0000;
                        state <= north_yellow;
                    end else begin
                        count <= count + 1'b1;
                    end
                end

                north_yellow: begin
                    if (count == 4'b0011) begin
                        count <= 4'b0000;
                        state <= west;
                    end else begin
                        count <= count + 1'b1;
                    end
                end

                west: begin
                    if (count == 4'b1111) begin
                        count <= 4'b0000;
                        state <= west_yellow;
                    end else begin
                        count <= count + 1'b1;
                    end
                end

                west_yellow: begin
                    if (count == 4'b0011) begin
                        count <= 4'b0000;
                        state <= south;
                    end else begin
                        count <= count + 1'b1;
                    end
                end

                south: begin
                    if (count == 4'b1111) begin
                        count <= 4'b0000;
                        state <= south_yellow;
                    end else begin
                        count <= count + 1'b1;
                    end
                end

                south_yellow: begin
                    if (count == 4'b0011) begin
                        count <= 4'b0000;
                        state <= east;
                    end else begin
                        count <= count + 1'b1;
                    end
                end

                east: begin
                    if (count == 4'b1111) begin
                        count <= 4'b0000;
                        state <= east_yellow;
                    end else begin
                        count <= count + 1'b1;
                    end
                end

                east_yellow: begin
                    if (count == 4'b0011) begin
                        count <= 4'b0000;
                        state <= north;
                    end else begin
                        count <= count + 1'b1;
                    end
                end

                default: begin
                    state <= north;
                    count <= 4'b0000;
                end
            endcase
        end
    end

    // Combinational logic for traffic lights
    always @(state) begin
        case (state)
            north: begin
                north_light = 3'b001; south_light = 3'b100;
                east_light  = 3'b100; west_light  = 3'b100;
            end

            north_yellow: begin
                north_light = 3'b010; south_light = 3'b100;
                east_light  = 3'b100; west_light  = 3'b100;
            end

            south: begin
                north_light = 3'b100; south_light = 3'b001;
                east_light  = 3'b100; west_light  = 3'b100;
            end

            south_yellow: begin
                north_light = 3'b100; south_light = 3'b010;
                east_light  = 3'b100; west_light  = 3'b100;
            end

            west: begin
                north_light = 3'b100; south_light = 3'b100;
                east_light  = 3'b100; west_light  = 3'b001;
            end

            west_yellow: begin
                north_light = 3'b100; south_light = 3'b100;
                east_light  = 3'b100; west_light  = 3'b010;
            end

            east: begin
                north_light = 3'b100; south_light = 3'b100;
                east_light  = 3'b001; west_light  = 3'b100;
            end

            east_yellow: begin
                north_light = 3'b100; south_light = 3'b100;
                east_light  = 3'b010; west_light  = 3'b100;
            end

            default: begin
                north_light = 3'b100; south_light = 3'b100;
                east_light  = 3'b100; west_light  = 3'b100;
            end
        endcase
    end

endmodule


test bench
`timescale 1ns / 1ps
module Traffic_sys_tb();

    // Testbench signals
    reg clk;
    reg rst;
    wire [2:0] north_light, south_light, east_light, west_light;

    // Instantiate the Traffic System
    Traffic_sys uut (
        .north_light(north_light),
        .south_light(south_light),
        .east_light(east_light),
        .west_light(west_light),
        .clk(clk),
        .rst(rst)
    );

    // Clock generation: 10ns period (100 MHz)
    initial begin
        clk = 0;
        forever #5 clk = ~clk;  // Toggle clock every 5ns
    end
      
      

    // Stimulus process
    initial begin
        // Monitor all signals
        $monitor("Time=%0t | State: North=%b South=%b East=%b West=%b", 
                  $time, north_light, south_light, east_light, west_light);

        // Apply reset
        rst = 1;
        #20;  // Hold reset high for 20ns

        // Release reset
        rst = 0;

        // Run simulation for enough cycles to see all state transitions
        #500;

        // Finish simulation
        $finish;
    end

endmodule
